Вариант использования представляет собой последовательность действий (транзакций), выполняемых системой в ответ на событие, инициируемое некоторым внешним объектом (действующим лицом). 

Действующее лицо (actor) – это роль, которую пользователь играет по отношению к системе.
Таким образом, варианты  использования  –  это  функции,  выполняемые  системой, а действующие  лица  –  это   заинтересованные  лица  (stakeholders) по отношению к создаваемой системе.

Предусловия варианта использования – это такие условия, которые должны быть выполнены, прежде чем вариант использования начнет выполняться сам

Постусловиями называются такие условия, которые всегда должны быть выполнены после завершения варианта использования

Связи коммуникации (communication), включения (include), расширения (extend) и обобщения (generalization)
	Связь коммуникации – это связь между вариантом использования и действующим лицом. На языке UML связи коммуникации показывают с помощью однонаправленной ассоциации (сплошной линии со стрелкой)

	Связь включения применяется в тех ситуациях, когда имеется какой-либо фрагмент поведения системы, который повторяется более чем в одном варианте использования

	Связь  расширения  применяется  при  описании  изменений в нормальном поведении системы

	С помощью связи обобщения показывают, что у нескольких действующих лиц имеются общие черты

Диаграммы взаимодействия (interaction diagrams) описывают поведение взаимодействующих групп объектов

Сообщение (message) – это средство, с помощью которого объект-отправитель запрашивает у объекта получателя выполнение одной из его операций
	Информационное (informative) сообщение – это сообщение, снабжающее объект-получатель некоторой информацией для обновления его состояния

	Сообщение-запрос (interrogative) – это сообщение, запрашивающее выдачу некоторой информации об объекте-получателе

	Императивное (imperative) сообщение – это сообщение, запрашивающее у объекта-получателя выполнение некоторых действий

Диаграммы последовательности отражают поток событий, происходящих в рамках варианта использования
	Все действующие лица показаны в верхней части диаграммы; в приведенном выше примере изображено действующее лицо Клиент. Объекты, требуемые системе для выполнения варианта использования «Снять деньги», также представлены в верхней части диаграммы. Стрелки соответствуют сообщениям, передаваемым между действующим лицом и объектом или между объектами для выполнения требуемых функций

Подобно диаграммам последовательности, кооперативные диаграммы (collaborations) отображают поток событий через конкретный сценарий варианта использования
Из нее легче понять связи между объектами, однако, труднее уяснить последовательность событий

Диаграмма классов определяет типы классов системы и различного рода статические связи, которые существуют между ними
Связывающие  классы  линии  отражают  взаимодействие между классами.

Стереотипы  –  это  механизм,  позволяющий  разделять  классы на категории. В языке UML определены три основных стереотипа классов: Boundary (граница), Entity (сущность) и Control (управление).

	Граничными классами (boundary classes) называются такие классы, которые расположены на границе системы и всей окружающей среды. Это экранные формы, отчеты, интерфейсы с аппаратурой (такой как принтеры или сканеры) и интерфейсы с другими системами.

	Классы-сущности (entity classes) содержат хранимую информацию. Они  имеют  наибольшее  значение  для  пользователя,  и  потому в их названиях часто используют термины из предметной области. Обычно для каждого класса-сущности создают таблицу в базе данных
	
	Управляющие классы (control classes) отвечают за координацию действий других классов. Обычно у каждого варианта использования имеется один управляющий класс, контролирующий последовательность событий этого варианта использования. Управляющий класс отвечает за координацию, но сам не несет в себе никакой функциональности, так как остальные классы не посылают ему большого количества сообщений. Вместо этого он сам посылает множество сообщений. Управляющий класс просто делегирует ответственность другим классам, по этой причине его часто называют классом-менеджером.

Пакеты применяют, чтобы сгруппировать классы, обладающие некоторой общностью. Существует несколько наиболее распространенных подходов  к  группировке.  Во-первых,  можно  группировать  их по стереотипу

Другой   подход   заключается   в   объединении   классов по их функциональности. Например, в пакете Security (безопасность) содержатся все классы, отвечающие за безопасность приложения
диаграмма пакетов представляет собой диаграмму, содержащую пакеты классов и зависимости между ними. Строго говоря, пакеты и зависимости являются элементами диаграммы классов, то есть диаграмма пакетов – это форма диаграммы классов.

Атрибут – это элемент информации, связанный с классом
У атрибута можно определить четыре возможных значения этого параметра
	–	Public (общий, открытый). Это значение видимости предполагает, что атрибут будет виден всеми остальными классами
	
	–	Private  (закрытый,  секретный).  Соответствующий  атрибут не виден никаким другим классом
	
	–	Protected (защищенный). Такой атрибут доступен только самому классу и его потомкам.
	
	-	Package or Implementation (пакетный). Предполагает, что данный атрибут является общим, но только в пределах его пакета

Операции реализуют связанное с классом поведение. Операция включает три части – имя, параметры и тип возвращаемого значения. 
Следует рассмотреть четыре различных типа операций. 
	Операции реализации (implementor operations) реализуют некоторые бизнес-функции
	
	Операции управления (manager operations) управляют созданием и уничтожением объектов. В эту категорию попадают конструкторы и деструкторы классов.
	
	Атрибуты обычно бывают закрытыми или защищенными. Тем не менее, другие классы иногда должны просматривать или изменять их значения. Для этого существуют операции доступа (access operations).Геттеры и сеттеры
	
	Вспомогательными (helper operations) называются такие операции класса, которые необходимы ему для выполнения его ответственностей, но о которых другие классы не должны ничего знать. Это закрытые и защищенные операции класса

Существуют четыре типа связей, которые могут быть установлены между классами: ассоциации, зависимости, агрегации и обобщения
	Ассоциация (association) – это семантическая связь между классами.Их рисуют на диаграмме классов в виде обыкновенной линии.

	Связи  зависимости  (dependency)  также  отражают  связь между классами, но они всегда однонаправлены и показывают, что один класс зависит от определений, сделанных в другом. Зависимости изображают в виде стрелки, проведенной пунктирной линией

	Агрегации (aggregations) представляют собой более тесную форму ассоциации. Агрегация – это связь между целым и его частью. Например, у вас может быть класс Автомобиль, а также классы Двигатель, Покрышки и классы для других частей автомобиля. В результате объект класса Автомобиль будет состоять из объекта класса Двигатель, четырех объектов Покрышек и т. д. Агрегации визуализируют в виде линии с ромбиком у класса, являющегося целым

	С помощью обобщений (generalization) показывают связи наследования между двумя классами

Помимо наследуемых, каждый подкласс имеет свои собственные уникальные атрибуты, операции и связи
	
	Множественность (multiplicity) показывает, сколько экземпляров одного класса взаимодействуют с помощью этой связи с одним экземпляром другого класса в данный момент времени.(0..*, 1..*)

Связи можно уточнить с помощью имен связей или ролевых имен. Имя связи – это обычно глагол или глагольная фраза, описывающая, зачем она нужна.

Ролевые имена применяют в связях ассоциации или агрегации вместо имен для описания того, зачем эти связи нужны

Диаграммы  состояний  определяют  все  возможные  состояния, в которых может находиться конкретный объект, а также процесс смены состояний объекта в результате наступления некоторых событий
	
	На диаграмме имеются два специальных состояния – начальное (start) и конечное (stop)

С состоянием можно связывать данные пяти типов: деятельность, входное действие, выходное действие, событие и история состояния.
	Деятельностью (activity) называется поведение, реализуемое объектом, пока он находится в данном состоянии

	Входным действием (entry action) называется поведение, которое выполняется, когда объект переходит в данное состояние

	Выходное действие (exit action) подобно входному. Однако, оно осуществляется как составная часть процесса выхода из данного состояния

	Поведение объекта во время деятельности, при входных и выходных действиях может включать отправку события другому объекту. Например, объект account (счет) может посылать событие объекту card reader (устройство чтения карты). В этом случае описанию деятельности, входного действия или выходного действия предшествует знак « ^ ». Соответствующая строка на диаграмме выглядит как
	Do: ^Цель.Событие(Аргументы) Здесь Цель – это объект, получающий событие, Событие – это посылаемое сообщение, а Аргументы являются параметрами посылаемого сообщения.

	Переходом (Transition) называется перемещение из одного состояния в другое

	Событие (event) – это то, что вызывает переход из одного состояния в другое. 

	Ограждающие условия (guard conditions) определяют, когда переход может, а когда не может осуществиться

	Действием (action), как уже говорилось, является непрерываемое поведение, осуществляющееся как часть перехода

Диаграммы  компонентов  показывают,  как  выглядит  модель на физическом уровне. На них изображены компоненты программного обеспечения и связи между ними. При этом на такой диаграмме выделяют два типа компонентов: исполняемые компоненты и библиотеки кода
(хедеры и сипипи, если говорить Сиииии++)

Диаграмма размещения (deployment diagram) отражает физические взаимосвязи между программными и аппаратными компонентами системы. Она является хорошим средством для того, чтобы показать маршруты перемещения объектов и компонентов в распределенной системе.(Сервер-хуервер)